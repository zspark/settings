# 月末总结
8/26/2016 11:22:13 AM 

&nbsp; &nbsp; &nbsp; &nbsp;以下内容是我近一个月来的笔记拾零，我尽量精简出来核心思想，回过头来查看的时候发现大部分内容倾向于编程、有效协作、项目等，可能是出于程序员的本能吧，表达欠妥之处还望指点一二。

## 公司气氛
&nbsp; &nbsp; &nbsp; &nbsp;公司目前规模小，人员管理更加倾向于人性管理而非制度管理，每周的体育活动到是平添很多乐趣，增进同事间彼此的了解。公司获奖荣誉或多或少激励着大家，员工情绪明显比较稳定且正能量充沛，员工工龄与人数比较搭配，10年、7年、3年左右都有。公司选址在小区里面，清静淡雅倒也少了些许浮夸之气而把心思集中于公司的核心价值，整体软硬件环境非常不错:)

## 一些随笔（不分先后）
1. 希望能规范化格式，这不仅仅是对一个项目统一编码风格的约束，更是一个团队集体性的体现；
2. 规范格式是针对编程来说，而对于项目的话同样需要规范。这就体现在具体项目用词、概念、专有名字等方面，比如我在程序中看到了mat一词，我需要看完上下文才能知道它是material的缩写还是matrix的缩写，这种命名显然没有专一性，我想写出matrix（多写rix）并没有什么困难，反而意思表达更加明确。再比如各种矩阵，按照经典的概念，模型矩阵就是将模型中顶点的坐标变化到世界空间下的坐标的变换矩阵，而视觉矩阵就是将世界标架下的坐标变换到眼标架的变化矩阵。类似这样的概念希望能非常明确，统一开发者的意识，不要将特殊场合使用的矩阵也使用类似的名字以防止误导；
3. 希望文档与开发同步进行，文档可以按照doxygen需要的格式直接写在程序文件里面；这样做的好处绝非仅仅为了以后利用doxygen生成文档，更是可以在开发期间整合开发者的思路，使写出的程序更加健壮、优秀，至少更加明确；
4. **希望主程或核心人员预留小部分时间检查团队开发者提交的代码是否符合规范、符合框架结构、代码是否有冗余、可优化、可共享等等。每一个优秀的团队都有他们趁手的软件工具箱，比如读写外部文件的库、比如扩展的数学函数库、动画库、框架结构库等，我们应该整合再利用他们从而让开发者集中具体逻辑的开发，并且让以后的开发更为高效；**
5. 没有利用好版控软件。目前团队对于svn的态度更加倾向于“仓库”，而忽视其“版控”这一主要功能，大家的工作模式基本都是写完改完提交。服务器没有分支，没有里程碑标志，这样一来倘若有现场展示软件的需求的话便会尴尬（手机游戏开发期间经常会有这样的情况发生，比如领导过来看下近期的游戏效果，或者进度），而如果有里程碑标志或者稳定分支的话，可以随时切换到那个节点进行展示。当然这仅仅是一个好处，比如我忘记了稳定版本的细节表现同样也可以切回去查看，而不是把自己最近调整的还原或者注释掉；另外一点就是提交尽量要求有必要的说明，如果可以汉语提交（我看大家都是英文说明提交）则省去了憋英文句子的痛苦，同时还能正确的表达意思。提交写说明的另一个好处是可以再次查阅调整的程序，对那些无意间或者不必要的改动可以还原，精炼提交代码的目的性；
6. 编程比较随意。可能我来自手游开发导致对性能、内存的管理意识与要求相对高些，在我拜读项目helper模块的时候，这种“不在意”性能与内存开销的地方非常多，一部分原因可能来自开发者对底层性能的理解不太到位，一部分可能来自无意识。这种情况在我的经验里主要靠第4点进行，慢慢的团队意识就会统一，效率就会提升；
7. 各自为营，开发好了再提交。这是典型的分布式开发模式而非集中式，svn这种集中式管理的方式要求开发者尽量开发具体模块一部分然后提交，以避免长时间滞后带来的严重冲突，不过严格分模块化开发方式可以不用太担心，至少很少有冲突产生。而类似git分散式开发模式可以让开发者在各个模块间来回游走，任何人的任何代码可以随意更改而提交（没准与原作者意思不符，产生新bug），虽然一些git服务器端有监控功能，但git本省的开发模式是天生的。针对目前咱们团队这点我觉得要么采用严格模块化开发，要么要求大家更新稍作频繁，也就是精修改勤更新，以对抗不必要的冲突；
8. Helper模块封装性不足。项目helper模块的各种类基本遵守一整到底的public成员方法与private成员变量，细查你会发现有些public方法只有在类内部使用，暴露不必要方法而不对其封装绝非OOP编程思想所倡导，这更多的属于程序员编程意识而非编码能力，依然需要主程在适当时候加以指导；其次还有一些编程细节比如简单的函数完全可以使用inline关键字，非修改成员变量的方法完全可以（在我的编程哲学中是必须）在函数后添加const关键字等；
9. 新人权限太多。我肯定不太愿意新人能有权提交项目中的任何一个修改的文件，因为即便是高手至少也要对项目框架有所熟悉才能进行，当我感觉他与我的交流基本能达成一致的时候（项目规范、要求、框架结构、现有逻辑的含义的一致，并非编程哲学等的一致），我才会慢慢释放对其的权限；
10. 项目架构清晰。这倒是我开心的地方，我看待程序经常是从宏观开始（不然也不会画UML）理清框架结构，不然一叶障目不见泰山之感使我颇为焦虑。RenderMaxUI通过MoDll.dll动态库与两个部分连接，一个RenderMax.lib也就是我们的引擎，一个RenderMaxGridHelp.lib也就是我们的辅助模块，其中RenderMax需要第三方渲染器进行渲染，需要open3dimension动态链接库加载外部模型文件并转化为引擎需要的数据格式，而RenderMax同样采用场景图以减轻渲染压力。从此架构来看RenderMax是核心，辅助模块是为可视化界面做渲染，MoDll.dll动态库采用Facade设计模式将几个大模块联系在一起。
11. 每周完全可以有一个小时时间进行程序、项目心得等团队交流，有助于提高员工能力与团队凝聚力，也有注意帮助理解他人开发思路，拓展自己的能力；

## 漫漫取经路
&nbsp; &nbsp; &nbsp; &nbsp;转技术的第一个月收获颇丰。首先肯定是复习了C++相关概念与语法，这个东西更多的需要记忆与实际使用。其次逐渐熟悉了OpenGL非可编程渲染管线下的一些函数与含义，将其与着色器程序联系起来颇有拨云见日之感。再次逐渐熟悉了RenderMaxGridHelp项目，最后了解了assimp、freeimage、tinyxml2、glfw等开源库，粗略了解cuda因暂时跨度较大稍作延缓。目前Helper模块没有问题可直接开发，OpenGL函数、各种C++标准库函数等网上解释很多，只要假以时日便可熟悉，暂时唯一不能大快人心之处便是非可编程渲染管线下函数的性能（比如glPushAttrib（ALL）到底能有多影响性能）与细节（比如glBegin与glEnd之间的一堆是怎么分段的，2个glVertex4f为什么不是第二个数据顶掉第一个顶点数据反而是全新的一个顶点？），及其GPU debug的相关内容。我希望公司能安排我涉及图形图像学相关范畴的任何工作，加班什么的无所谓，因为在家也是乐在程序中。
